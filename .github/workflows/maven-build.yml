# .github/workflows/maven-build.yml

name: Java CI Build for GitHubby App

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ main ] # Adjust if your main branch is named differently (e.g., master)
  
  # Triggers the workflow on pull request events targeted at the main branch
  pull_request:
    branches: [ main ] # Adjust if your main branch is named differently

  # Allows the workflow to be triggered manually or via API (e.g., by Opsera)
  workflow_dispatch: 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up JDK (e.g., version 17 - IMPORTANT: adjust if your project needs a different version like 11!)
      # This action also caches Maven dependencies for faster builds
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17' 
          distribution: 'temurin' # Popular Java distribution
          cache: maven

      # Step 3: Build with Maven
      # IMPORTANT: We first change directory to 'app' then run Maven
      - name: Build with Maven (in app directory)
        run: cd app && mvn -B package --file pom.xml -DskipTests
        # Explanation of mvn command:
        # cd app          => Change directory to where pom.xml lives
        # &&              => If cd succeeds, then run the next command
        # mvn             => Execute maven
        # -B              => Run in non-interactive (batch) mode - recommended for CI
        # package         => Compile, test (if not skipped), and package the application
        # --file pom.xml  => Specify the POM file (good practice within the target dir)
        # -DskipTests     => Skip running the tests
